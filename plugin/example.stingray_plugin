// About
//
name = "Interactive Plugin"
description = "Autodesk Interactive Plugin Example"
version = "3.0.0"
changelog = {
    "1.0.0": "First version"
    "1.9.0": "Update plugin for Stingray 1.9"
    "2.0.0": "Update plugin for Autodesk Interactive 2.0"
    "3.0.0": "Update plugin for Autodesk Interactive 3.0"
}
author = {
    name = "Jonathan Schmidt"
    email = "jonathan.schmidt@autodesk.com"
    company = "Autodesk Inc."
    url = "https://github.com/AutodeskGames/stingray-plugin"
}
keywords = ["autodesk", "interactive", "stingray", "plugin", "example"]

// Define plugin thumbnail
thumbnail = "sample_project/sample.svg"

// Extensions
//
extensions = {

    // Define some actions that can be triggered. i.e. on menu triggers or system events.
    actions = [
        { name= "example-on-editor-started" type = "js" module = "example-actions" function_name = "onEditorStarted" }
        { name= "example-on-level-changed" type = "js" module = "example-actions" function_name = "onLevelChanged" }
        { name= "example-test-editor-native-extension" type = "js" module = "example-actions" function_name = "testEditorNativeExtension" }
    ]

    // Define a set of event handlers that gets triggered on system events or user events.
    events = [
        // Raised when the editor starts. Global events do not need the `for` keyword
        { on = "EditorStarted" do = ["example-on-editor-started"] }

        // Raised when the current level changes. Use the `for` keywork when connection to a specific system or service.
        { for = "level-editing-service" on = "CurrentLevelChanged" do = ["example-on-level-changed"] }
    ]

    // Define plugin views.
    views = [
        { type = "panel" name = "example" path = "example-view" title = "Example View" }
    ]

    // Define menu items to trigger actions, open views, etc..
    menus = [
        { path = "Example" order = 12000 }
        { path = "Example/View" view = "example" order = 0 }
        { path = "Example/Editor Native Extension" action = "example-test-editor-native-extension" }
    ]

    // Define asset types that extend the asset browser.
    asset_types = [
        { type = "example_type" category = "Example" icon = "img/example_type_icon.svg" }
    ]

    // Define a project template extension that will show up in the project manager.
    templates = [
        { type = "project-template" path = "sample_project/sample.stingray_project" }
    ]

    // Map plugin resources available for all projects.
    resources = [
        { path = "example_resources" }
    ]

    // Load the engine extension in the editor engine instance.
    runtime_libraries = [
        {
            name = "engine_plugin"
            paths = {
                win32 = {
                    dev = "binaries/engine/win64/dev/engine_plugin_w64_dev.dll"
                    debug = "binaries/engine/win64/debug/engine_plugin_w64_debug.dll"
                    release = "binaries/engine/win64/release/engine_plugin_w64_release.dll"
                }
            }
        }
    ]
}

// Dependencies
//
platforms = ["win64"]
dependencies = {
    "stingray" = "~3.0.0"
}
